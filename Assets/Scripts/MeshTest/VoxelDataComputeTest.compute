// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateVoxelData
#pragma kernel TEMPNewChunk

#include "FastNoiseLite.hlsl"

fnl_state TestCreateState(int seed)
{
    fnl_state newState;
    newState.seed = seed;
    newState.frequency = 0.05f;
    newState.noise_type = FNL_NOISE_OPENSIMPLEX2;
    newState.rotation_type_3d = FNL_ROTATION_NONE;
    newState.fractal_type = FNL_FRACTAL_NONE;
    newState.octaves = 3;
    newState.lacunarity = 2.0f;
    newState.gain = 0.5f;
    newState.weighted_strength = 0.0f;
    newState.ping_pong_strength = 2.0f;
    newState.cellular_distance_func = FNL_CELLULAR_DISTANCE_EUCLIDEANSQ; // 1
    newState.cellular_return_type = FNL_CELLULAR_RETURN_TYPE_DISTANCE; // 1
    newState.cellular_jitter_mod = 1.0f;
    newState.domain_warp_amp = 30.0f;
    newState.domain_warp_type = FNL_DOMAIN_WARP_OPENSIMPLEX2;
    return newState;
}

fnl_state TestCellularState(int seed)
{
    fnl_state newState = TestCreateState(seed);
    newState.noise_type = FNL_NOISE_CELLULAR;
    return newState;
}

//////// Constants ////////

static fnl_state STATE = TestCreateState(1337);
static fnl_state CELLSTATE = TestCellularState(1337);

static const uint3 CENTER = uint3(48, 48, 48);

//////// Buffers ////////

RWStructuredBuffer<int> ChunkDataBuffer;
RWStructuredBuffer<int> Offset;
RWStructuredBuffer<uint> ChunkSize;

// Main
[numthreads(8,8,8)]
void UpdateVoxelData(uint3 id : SV_DispatchThreadID)
{
    const float s = .2f;
    float noise = fnlGetNoise3D(CELLSTATE, id.x*s + Offset[0]/50.f, id.y*s, id.z*s);
    noise += fnlGetNoise3D(CELLSTATE, id.x*s*2 + Offset[0]/50.f, id.y*s*2, id.z*s*2)/10.f;
    noise += fnlGetNoise3D(CELLSTATE, id.x*s*4 + Offset[0]/50.f, id.y*s*4, id.z*s*4)/20.f;
    noise += fnlGetNoise3D(STATE, (id.x*s*2.f) + Offset[0]/50.f, id.y*s*2.f, id.z*s*2.f) / 5.f;
    noise += fnlGetNoise3D(STATE, (id.x*s*4.f) + Offset[0]/50.f, id.y*s*4.f, id.z*s*4.f) / 10.f;
    noise += fnlGetNoise3D(STATE, (id.x*s*8.f)+ Offset[0]/50.f, id.y*s*8.f, id.z*s*8.f) / 15.f;

    noise *= 32.f;

    noise += (48 - (id.y*1.f));
    noise = max(noise, 10.f - id.y);
    
    const uint index = id.x + (id.z * ChunkSize[0]) + (id.y * ChunkSize[0] * ChunkSize[2]);

    ChunkDataBuffer[index] = clamp(noise, 0, 15);
}

//TEMP
[numthreads(1,1,1)]
void TEMPNewChunk(uint3 id : SV_DispatchThreadID)
{
    Offset[0] += 1;
}
